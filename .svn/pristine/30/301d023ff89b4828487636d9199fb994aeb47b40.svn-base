<template>
    <div class="index">
        <div class="content-wrapper">
            <div class="poc-banner">
                <div class="ub ub-ac ub-pc ub-ver">
                    <img src="../../assets/img/poc.png" alt="">
                    <p>漏洞验证利用工具</p>
                </div>
            </div>
            <div class="w1200">
                <div class="search">
                    <div class="tab-bar ub ub-pj">
                        <div :class="{active: activeName === 'first'}" @click="handleClick('first')">
                            扫描
                        </div>
                        <div :class="{active: activeName === 'second'}" @click="handleClick('second')">
                            攻击
                        </div>
                    </div>
                    <el-input v-model.trim="urls" placeholder="请输入URL,多个以','号分隔" class="input-with-select search-input">
                        <div slot="append" class="ub ub-ac ub-pj">
                            <el-select v-model="scriptVal" class="slot-select" size="mini" placeholder="选择脚本">
                                <el-option
                                    v-for="(item, index) in scriptList"
                                    :key="index"
                                    :label="item"
                                    :value="item"
                                >
                                </el-option>
                            </el-select>
                            <div class="slot-button ub ub-ac ub-pc">
                                <i :class="loadingBtn ? 'el-icon-loading' : 'el-icon-search'" @click="runPoc"></i>
                            </div>
                        </div>
                    </el-input>
                </div>
                <h2 v-if="!runFlag" class="result-title">
                    {{ getCurrentTitle() }}
                </h2>
                <div v-if="!runFlag" class="result-box">
                    <el-table
                        ref="multipleTable"
                        v-loading="loadingHis"
                        :data="tableDataHis"
                        tooltip-effect="dark"
                        header-cell-class-name="fly-table-title"
                        style="width: 100%"
                    >
                        <el-table-column prop="id" label="任务ID">
                        </el-table-column>
                        <el-table-column prop="urls" label="URL">
                        </el-table-column>
                        <el-table-column prop="files" label="选中的脚本">
                        </el-table-column>
                        <el-table-column prop="createTime" label="扫描时间" width="180">
                        </el-table-column>
                        <el-table-column align="center" label="操作" width="160">
                            <template slot-scope="scope">
                                <span style="cursor: pointer;color: #2e7fff;margin-right: 10px" @click="searchResult(scope.row)">结果预览</span>
                                <a :href="'/api/poc/client/poc/getReport?id=' + scope.row.id" style="cursor: pointer;color: #2e7fff" download>
                                    结果导出
                                </a>
                            </template>
                        </el-table-column>
                    </el-table>
                    <div class="pagination">
                        <el-pagination
                            :current-page="get_params.page"
                            :page-sizes="[10, 20, 30, 40,50]"
                            :page-size="get_params.size"
                            layout="total, sizes, prev, pager, next, jumper"
                            :total="total_num"
                            @size-change="handleSizeChange"
                            @current-change="handleCurrentChange"
                        >
                        </el-pagination>
                    </div>
                </div>
                <!--执行结果-->
                <h2 v-if="runFlag" class="result-title">
                    执行结果
                </h2>
                <div v-if="runFlag" class="code-box">
                    <pre style="overflow: auto;">
						<code v-for="(item,index) in result" :key="index">{{ item.result }}</code>
					</pre>
                </div>
            </div>
        </div>
        <el-dialog title="攻击参数" :visible.sync="attackParamsDialog" :lock-scroll="false" width="640px" center>
            <el-form ref="attackForm" :model="attackForm" :rules="attackRules">
                <el-form-item label="" prop="attackParameter">
                    <el-input v-model.trim="attackForm.attackParameter" size="mini" placeholder="请填写参数"></el-input>
                </el-form-item>
            </el-form>
            <span slot="footer" class="ub ub-pe dialog-footer">
                <el-button size="mini" @click="attackParamsDialog = false">取 消</el-button>
                <el-button size="mini" type="primary" @click="sureCheck">确 定</el-button>
            </span>
        </el-dialog>
    </div>
</template>

<script>
import {
    getPocList,
    runPocList
} from '../../server/poc/api.js'

export default {
    name: 'Index',
    data() {
        return {
            scriptVal: 'S2-046_CVE-2017-5638.py',
            scriptList: ['S2-046_CVE-2017-5638.py'],
            typeOptions: [],
            activeName: 'first',
            runFlag: false,
            changePasswordForm: {
                id: '',
                oldPwd: '',
                newPwd: '',
                confirmPwd: ''
            },
            attackRules: {
                attackParameter: [{
                    required: true,
                    message: '请输入攻击参数',
                    trigger: 'blur'
                }]
            },
            formLabelWidth: '120px',
            urls: '',
            parameter: '',
            number: 0,
            result: [],
            loading: false,
            multipleSelection: [],
            tableData: [],
            get_params: {
                page: 1,
                size: 10,
                name: ''
            },
            total_num: 0,
            code: '',
            loadingHis: false,
            tableDataHis: [],
            loadingBtn: false,
            attackParamsDialog: false,
            attackForm: {
                url: '',
                attackParameter: '',
                id: ''
            },
            attackResultVis: false,
            attackResultLoading: false,
            attackResultData: []
        }
    },
    watch: {
        attackParamsDialog(val) {
            if (!val) {
                this.$refs['attackForm'].resetFields()
            }
        }
    },
    created() {
        this.userInfo = this.$getlocalStorage('userInfo')
        console.log('this.userInfo', this.userInfo)
    },
    mounted() {
        setTimeout(() => {
            this.get_history_data()
        }, 1000)
    },
    methods: {
        handleClick(name) {
            this.activeName = name
            this.runFlag = false
            this.get_history_data()
        },
        sureCheck(row) {
            if (row === 'row') {
                let urlArr = this.urls.split(',')
                let data = {
                    queryData: {},
                    paramsData: {
                        urls: urlArr,
                        files: [this.scriptVal],
                        type: 2,
                        parameter: this.attackForm.attackParameter
                    }
                }
                this.loadingBtn = true
                runPocList(data).then(res => {
                    console.log('runPoc', res)
                    this.result = res
                    this.runFlag = true
                    this.loadingBtn = false
                }).catch(error => {
                    this.loadingBtn = false
                    console.log('error' + error)
                })
            } else {
                this.$refs['attackForm'].validate((valid) => {
                    if (valid) {
                        let urlArr = this.urls.split(',')
                        let data = {
                            queryData: {},
                            paramsData: {
                                urls: urlArr,
                                files: [this.scriptVal],
                                type: 2,
                                parameter: this.attackForm.attackParameter
                            }
                        }
                        this.loadingBtn = true
                        runPocList(data).then(res => {
                            console.log('runPoc', res)
                            this.attackParamsDialog = false
                            this.result = res
                            this.runFlag = true
                            this.loadingBtn = false
                        }).catch(error => {
                            console.log('error' + error)
                            this.loadingBtn = false
                            this.attackParamsDialog = false
                        })
                    } else {
                        console.log('error submit!!')
                        return false
                    }
                })
            }
        },
        searchResult(row) {
            this.urls = row.urls
            this.attackForm.attackParameter = row.parameter
            if (row.type === 1) {
                this.runPoc()
            } else {
                this.sureCheck('row')
            }
        },
        getCurrentTitle() {
            if (this.activeName === 'first') {
                return '扫描结果'
            } else {
                return '攻击结果'
            }
        },
        runPoc() {
            if (this.urls === '') {
                if (document.getElementsByClassName('el-message').length === 0) {
                    this.$message({
                        message: 'URL不能为空!',
                        type: 'warning'
                    })
                }
                return
            }
            if (this.activeName === 'first') {
                let urlArr = this.urls.split(',')
                let data = {
                    queryData: {

                    },
                    paramsData: {
                        urls: urlArr,
                        files: [this.scriptVal],
                        type: this.activeName === 'first' ? 1 : 2
                    }
                }
                this.loadingBtn = true
                runPocList(data).then(res => {
                    this.loadingBtn = false
                    console.log('runPoc', res)
                    this.result = res
                    this.runFlag = true
                    /* this.result = res.successList
                    this.userInfo.number = res.integral.number
                    this.$setlocalStorage('userInfo', this.userInfo)*/
                }).catch(error => {
                    this.loadingBtn = false
                    console.log('error' + error)
                })
            } else {
                this.attackParamsDialog = true
            }
        },
        handleSelectionChange(val) {
            console.log('handleSelectionChange', val)
            this.multipleSelection = val
            console.log(this.multipleSelection) // create_id:
            this.number = this.multipleSelection.length
        },
        handleSizeChange(val) {
            this.get_params.size = val
            this.get_history_data()
        },
        handleCurrentChange(val) {
            this.get_params.page = val
            this.get_history_data()
        },

        get_history_data() {
            this.loadingHis = true
            this.tableDataHis = []
            let data = {
                queryData: {
                    page: this.get_params.page,
                    pageSize: this.get_params.size
                },
                paramsData: {
                    type: this.activeName === 'first' ? 1 : 2
                }
            }
            getPocList(data).then(res => {
                console.log('history', res)
                this.loadingHis = false
                this.total_num = res.total
                let userDates = res.records
                if (userDates.length > 0) {
                    userDates.forEach(item => {
                        let obj = {}
                        obj.id = item.id
                        obj.createTime = item.createTime
                        obj.updateTime = item.updateTime
                        obj.urls = item.urls
                        obj.files = item.files
                        obj.userId = item.userId
                        obj.type = item.type
                        obj.parameter = item.parameter
                        this.tableDataHis.push(obj)
                    })
                }
                /* this.$nextTick(() => {
                    $('.index').scrollTop(500)
                }, 500)*/
            }).catch(error => {
                this.loadingHis = false
                console.log('error' + error)
            })
        }
    }
}
</script>

<style lang="scss" scoped>
.index{
    background: #fff;
}
.center{
    padding: 20px 0;
}
.w1200{
    width: 1200px;
    margin: 0 auto;
    position: absolute;
    top: 240px;
    left: 50%;
    transform: translateX(-50%);
    padding-bottom: 50px;

}
.poc-banner {
    background: url("../../assets/img/pocBg.jpg") center no-repeat;
    background-size: 100% 300px;
    height: 300px;
    position: relative;
    > div {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);

        p {
            font-size: 29px;
            letter-spacing: 7px;
            color: #fff;
            position: relative;
        }
        p::before {
            content: url("../../assets/img/line1.png");
            position: absolute;
            width: 200px;
            height: 2px;
            top: -8px;
            left: -180px;
        }
        p::after {
            content: url("../../assets/img/line2.png");
            position: absolute;
            width: 200px;
            height: 2px;
            top: -8px;
            right: -207px;
        }
    }
}
.search .tab-bar {
    width: 200px;
    margin-bottom: 10px;
    >div {
        width: 70px;
        text-align: center;
        cursor: pointer;
        padding-bottom: 4px;
        font-size: 16px;
        border-bottom: 1px solid transparent;
        transition: all .3s cubic-bezier(.645,.045,.355,1);
    }
    >div.active {
        border-bottom: 1px solid #FFF;
        color: #FFF;
    }
    >div:hover{
        color: #FFF;
    }
}
.search >>> .input-with-select {
    box-shadow: -7px 13px 10px 0px rgba(141, 141, 141, 0.22);
    height: 50px;
    border-radius: 10px;
    border: none;

    input {
        height: 50px;
        box-sizing: border-box;
        border: solid 1px #e6e6e6;
        border-radius: 10px 0 0 10px;
        border-right:  none;
    }
}
.search >>> .el-input-group__append{
    //color: #fff;
    background-color: #fff;
    border: none;
    border-radius: 10px;
    > div {
        width: 290px;
        .slot-select {
            width: 260px;
            box-sizing: border-box;
        }
        .slot-button {
            width: 30px;
            height: 50px;
            display: block;
            box-sizing: border-box;
            text-align: center;
            i {
                display: inline-block;
                width: 20px;
                height: 22px;
                font-size: 20px;
                color: #2e7fff;
                cursor: pointer;
            }
        }
        .slot-select::before {
            position: absolute;
            content: '';
            width: 1px;
            height: 24px;
            background-color: #e6e6e6;
            right: 0;
            top: 13px;
            z-index: 2;
        }
    }
}
.search >>> .input-with-select input {
    border: none;
    background-color: #fff;
}
.search >>> .search-input {
    border: solid 1px #e6e6e6;
    background-color: #fff;
}
.search >>> .el-tabs__item{
    font-size: 16px;
    color: #595959;
}
.search >>> .el-tabs__header {
    margin: 0 0 5px;
}
.code-box {
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 0 20px;
    padding: 20px;
    min-height: 100px;
    font-size: 14px;
    color: #595959;
    box-sizing: border-box;
}
.result-title{
    font-weight: normal;
    margin: 58px 0 18px;
    padding-left: 10px;
    font-size: 18px;
    line-height: 30px;
    color: #2e7fff;
}
.result{
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 0 20px;
    padding: 20px;
    min-height: 100px;
}
::-webkit-input-placeholder {
    color: #cecece;
}

::-ms-input-placeholder {
    color: #aaa;
}
.pagination {
    margin-top: 20px;
    .el-pagination {
        text-align: right;
    }
}
</style>
